[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction to bayesTPC",
    "section": "",
    "text": "On this page, we will show how to use bayesTPC to fit basic TPCs."
  },
  {
    "objectID": "intro.html#using-vectraits",
    "href": "intro.html#using-vectraits",
    "title": "Introduction to bayesTPC",
    "section": "Using Vectraits",
    "text": "Using Vectraits\n\ndata &lt;- get_dataset(107)\n\nThanks to Vectraits’ standardized column naming, we can learn about our data through subsetting columns.\n\n# Traits measured\nunique(data$OriginalTraitName)\n\n[1] \"development rate\"\n\n# Species\nunique(data$Interactor1)\n\n[1] \"Myzus persicae\"\n\n# Does the data come from the lab or the field?\nunique(data$LabField)\n\n[1] \"laboratory\"\n\n# life stage of organism measured\nunique(data$Interactor1Stage)\n\n[1] \"juvenile\"\n\n# Unit of data\nunique(data$OriginalTraitUnit)\n\n[1] \"days-1\"\n\n\nFrom our exploration, we now know that we are fitting development rate in days for juvenile Myzus persicae measured in the lab. A full list of all possible data features and their definitions is available on the Vectraits website."
  },
  {
    "objectID": "intro.html#observations",
    "href": "intro.html#observations",
    "title": "Introduction to bayesTPC",
    "section": "Observations",
    "text": "Observations\nTo access the observations and their respective temperatures, we look at these columns:\n\nhead(data$OriginalTraitValue)\n\n[1] 0.059 0.128 0.129 0.150 0.162 0.156\n\nhead(data$Interactor1Temp)\n\n[1] 13.0 18.9 20.1 22.9 27.1 29.9\n\n\nTo fit using bayesTPC, we have to format our traits and temperatures into a named list.\n\ndata_list &lt;- list(Trait = data$OriginalTraitValue, Temp = data$Interactor1Temp)\nplot(data_list$Trait ~ data_list$Temp)"
  },
  {
    "objectID": "intro.html#default-models",
    "href": "intro.html#default-models",
    "title": "Introduction to bayesTPC",
    "section": "Default Models",
    "text": "Default Models\nIf the default model priors are satisfactory, fitting in bayesTPC can be done simply using b_TPC().\n\nset.seed(1)\nfit1 &lt;- b_TPC(data = data_list, model = \"briere\")\n\nCreating NIMBLE model:\n - Configuring model.\n - Compiling model.\n\nCreating MCMC:\n - Configuring MCMC.\n - Compiling MCMC.\n - Running MCMC.\n\nProgress:\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nConfiguring Output:\n - Finding Max. a Post. parameters.\n\nfit1\n\nbayesTPC MCMC of Type:\n  briere\n\nFormula:\n  m[i] &lt;- ( q * Temp * (Temp - T_min) * sqrt((T_max &gt; Temp) * abs(T_max - Temp)) * (T_max &gt; Temp) * (Temp &gt; T_min) )\n\nDistribution:\n  Trait[i] ~ T(dnorm(mean = m[i], tau = 1/sigma.sq), 0, )\n\nParameters:\n            MAP   Mean Median        Priors\nT_max    32.602 26.546 26.141 dunif(25, 60)\nT_min    11.841 22.257 23.348  dunif(0, 24)\nq         0.000  0.432  0.412   dunif(0, 1)\nsigma.sq  0.001  0.054  0.025       dexp(1)\n\n\nPrinting our fit object returns a simple summary of the MCMC results. We can use summary() to see a more detailed analysis.\n\nsummary(fit1)\n\nbayesTPC MCMC of Type:\n  briere\n\nFormula:\n  m[i] &lt;- ( q * Temp * (Temp - T_min) * sqrt((T_max &gt; Temp) * abs(T_max - Temp)) * (T_max &gt; Temp) * (Temp &gt; T_min) )\n\nDistribution:\n  Trait[i] ~ T(dnorm(mean = m[i], tau = 1/sigma.sq), 0, )\n\nPriors:\n  q ~ dunif(0, 1) \n  T_max ~ dunif(25, 60) \n  T_min ~ dunif(0, 24) \n  sigma.sq ~ dexp(1)\n\nMax. A Post. Parameters: \n   T_max    T_min        q sigma.sq log_prob \n 32.6015  11.8406   0.0002   0.0007   8.5465 \n\nMCMC Results:\nIterations = 1:10000\nThinning interval = 1 \nNumber of chains = 1 \nSample size per chain = 10000 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n             Mean     SD Naive SE Time-series SE\nT_max    26.54613 1.8385 0.018385        0.24255\nT_min    22.25734 3.5641 0.035641        0.73195\nq         0.43239 0.3266 0.003266        0.01901\nsigma.sq  0.05418 0.3599 0.003599        0.02400\n\n2. Quantiles for each variable:\n\n              2.5%      25%      50%      75%   97.5%\nT_max    2.505e+01 25.54139 26.14070 26.75010 32.6971\nT_min    9.915e+00 23.01179 23.34753 23.68103 23.9732\nq        2.026e-04  0.11553  0.41181  0.72869  0.9743\nsigma.sq 2.931e-03  0.01619  0.02495  0.04002  0.1254\n\n\nSomething doesn’t look quite right. Our MAP estimate is the sample with the highest posterior probability, but it isn’t even close to the mean and median of each parameter. This can suggest we haven’t converged to the best fit. Thankfully, bayesTPC offers diagnostics to measure whether our model fits our data."
  },
  {
    "objectID": "intro.html#diagnostics",
    "href": "intro.html#diagnostics",
    "title": "Introduction to bayesTPC",
    "section": "Diagnostics",
    "text": "Diagnostics\nThe simplest diagnostic we can perform is to just plot our model.\n\nplot(fit1)\n\n\n\n\nOh dear. Well, at least we have a better idea of what went wrong. Our priors for the minimum and maximum temperatures were far too lenient. For example, when we specified that the prior for T_min was dunif(0,24), we told bayesTPC that all values between 0 and 24 degrees Celcius were equally reasonable a priori. Looking at the data, this is not a reasonable assumption, as the trait value was relatively not close to zero at temperatures greater than 15. To confirm what went wrong, we can look at the traceplots for each parameter.\n\npar(mfrow = c(2,2))\ntraceplot(fit1, burn = 100)\n\n\n\n\nIf our model converged, we would see the parameters not move too much after an initial burn in period. This means the traces should look like a “fuzzy caterpillar”. Near the 8000th iteration, the MCMC goes to a completely different solution."
  },
  {
    "objectID": "intro.html#modifying-the-fitting-routine",
    "href": "intro.html#modifying-the-fitting-routine",
    "title": "Introduction to bayesTPC",
    "section": "Modifying the fitting routine",
    "text": "Modifying the fitting routine\nLet’s change our priors and set some reasonable initial values.\n\nfit2 &lt;- b_TPC(data = data_list, model = \"briere\",\n             priors = list(q = \"dunif(0,.0003)\",\n                           T_min = \"dunif(-5,10)\",\n                           T_max = \"dunif(30,40)\"),\n             inits = list(T_min = 10, T_max = 32))\n\nCreating NIMBLE model:\n - Configuring model.\n - Compiling model.\n\nCreating MCMC:\n - Configuring MCMC.\n - Compiling MCMC.\n - Running MCMC.\n\nProgress:\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nConfiguring Output:\n - Finding Max. a Post. parameters.\n\nfit2\n\nbayesTPC MCMC of Type:\n  briere\n\nFormula:\n  m[i] &lt;- ( q * Temp * (Temp - T_min) * sqrt((T_max &gt; Temp) * abs(T_max - Temp)) * (T_max &gt; Temp) * (Temp &gt; T_min) )\n\nDistribution:\n  Trait[i] ~ T(dnorm(mean = m[i], tau = 1/sigma.sq), 0, )\n\nParameters:\n            MAP   Mean Median         Priors\nT_max    33.487 33.492 33.539   dunif(30,40)\nT_min     1.941  2.003  1.787   dunif(-5,10)\nq         0.000  0.000  0.000 dunif(0,.0003)\nsigma.sq  0.000  0.004  0.000        dexp(1)\n\npar(mfrow = c(2,2))\ntraceplot(fit2)\n\n\n\n\nAfter a burn-in period of 1000 iterations, we seem to have converged to a decent solution. Let’s verify this by looking at the fit.\n\nplot(fit2, temp_interval = seq(0, 35, length.out = 1000), legend_position = \"topleft\", burn = 1000)\n\n\n\n\nThat looks a lot better! We have successfully fit a thermal performance curve using bayesTPC."
  },
  {
    "objectID": "intro.html#more-plots",
    "href": "intro.html#more-plots",
    "title": "Introduction to bayesTPC",
    "section": "More plots",
    "text": "More plots\nNow let’s explore more tools we can use to analyze our fits. First, let’s look at how the distribution of our parameters has changed using ppo_plot().\n\nppo_plot(fit2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also look at the pairwise posterior joint distributions of our parameters using bayesTPC_ipairs(), which is a wrapper of IDPmisc::ipairs().\n\nbayesTPC_ipairs(fit2)\n\n\n\n\nHere, we can see the relationships between our different parameters. Observe that the minimum temperature and the scale parameter are strongly positively correlated."
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "bayesTPC Examples",
    "section": "",
    "text": "Here, we provide (insert final number) examples demonstrating the functionality of bayesTPC."
  },
  {
    "objectID": "examples.html#example-1-non-linear-trait-data-with-normally-distributed-errors.",
    "href": "examples.html#example-1-non-linear-trait-data-with-normally-distributed-errors.",
    "title": "bayesTPC Examples",
    "section": "Example 1: Non-Linear Trait Data with Normally Distributed Errors.",
    "text": "Example 1: Non-Linear Trait Data with Normally Distributed Errors.\nLink\nIn this example, we show the original and most common use case of bayesTPC: easily and intuitively fitting traits that vary non-linearly with temperature."
  },
  {
    "objectID": "examples.html#example-2-count-data",
    "href": "examples.html#example-2-count-data",
    "title": "bayesTPC Examples",
    "section": "Example 2: Count Data",
    "text": "Example 2: Count Data\nLink\nIn this example, we fit count or survivorship data against temperature. To minimize tedious data transformation, bayesTPC supports fitting this type of data as binomial, bernoulli, or poisson random variables."
  },
  {
    "objectID": "example2.html",
    "href": "example2.html",
    "title": "bayesTPC Example 2: Count Data",
    "section": "",
    "text": "This is the second example demonstrating the functionality of bayesTPC. We will be assuming the reader has already has familiarity with the content covered in example 1. If you do not recognize a function, and it is not explicitly introduced, please refer back to example 1 for more information."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bayesTPC: An accessible interface to fit Bayesian thermal performance curves in R.",
    "section": "",
    "text": "bayesTPC is an R package to help conveniently fit common thermal performance models using Bayesian MCMC. We provide functionality to substitute for or supplement BUGS modelling workflows, especially for those without experience in Bayesian methods. To this end, bayesTPC contains a simple model specification format, BUGS configuration helpers, end-to-end model fitting methods, and model diagnostics."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "bayesTPC: An accessible interface to fit Bayesian thermal performance curves in R.",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of bayesTPC from GitHub with:\nremotes::install_github(\"johnwilliamsmithjr/bayesTPC\")"
  },
  {
    "objectID": "index.html#functionality",
    "href": "index.html#functionality",
    "title": "bayesTPC: An accessible interface to fit Bayesian thermal performance curves in R.",
    "section": "Functionality",
    "text": "Functionality\n\nModels\nbayesTPC offers many pre-configured TPC models. We can use get_models().\n\nget_models()\n\n [1] \"poisson_glm_lin\"    \"poisson_glm_quad\"   \"binomial_glm_lin\"  \n [4] \"binomial_glm_quad\"  \"bernoulli_glm_lin\"  \"bernoulli_glm_quad\"\n [7] \"briere\"             \"gaussian\"           \"kamykowski\"        \n[10] \"pawar_shsch\"        \"quadratic\"          \"ratkowsky\"         \n[13] \"stinner\"            \"weibull\"           \n\n\nTo see the exact specification of a particular model, we can use\n\nget_default_model_specification(\"briere\")\n\nbayesTPC Model Specification of Type:\n  briere\n\nModel Formula:\n  m[i] &lt;- ( q * Temp * (Temp - T_min) * sqrt((T_max &gt; Temp) * abs(T_max - Temp)) * (T_max &gt; Temp) * (Temp &gt; T_min) )\n\nModel Distribution:\n  Trait[i] ~ T(dnorm(mean = m[i], tau = 1/sigma.sq), 0, )\n\nModel Parameters and Priors:\n  q ~ dunif(0, 1) \n  T_max ~ dunif(25, 60) \n  T_min ~ dunif(0, 24)\n\nPrior for Variance:\n  sigma.sq ~ dexp(1)\n\n\nUse get_formula(), get_default_priors(), and get_default_constants() to display the individual components of a any model included in bayesTPC.\nFor those with experience in fitting models in BUGS, configure_model() provides pre-formatted code.\n\n\nFitting\nThe fitting workhorse of bayesTPC is the b_TPC() function. With b_TPC(), a user only needs to specify the dataset and desired model and bayesTPC handles configuring and running an MCMC using nimble. The user can also change the model priors, the sampler used, and other hyperparameters of the MCMC.\n\n\nChanging and Specifying models\nOne can also create their own models by specifying a formula and priors using specify_model(), along with its wrappers specify_normal_model() and specify_binomial_model().\nbayesTPC accepts both the name of a model and the model object itself as inputs to its workhorse functions. This provides two methods for users to customize existing models: providing customized priors and constants in the options of the functions themselves, or by storing the model object in the local environment and using the change_priors() and change_constants() functions. Note that since R objects are immutable, the modified models must be stored again.\n\n\nSummaries\nThe fit object returned by b_TPC() have can be summarized in multiple ways. summary() gives a detailed summary of the MCMC results, and plot() shows the fit given by the center (mean or median) and bounding (95% quantiles or hdi) MCMC samples. Similarly, posterior_predictive() and plot_prediction() take samples of the posterior to predict new values.\n\n\nDiagnostics\nbayesTPC provides multiple MCMC diagnostic plots. traceplot() wraps coda::traceplot() and shows the sampled values by sequential iteration. bayesTPC_ipairs() wraps IDPmisc::ipairs() and shows the pairwise joint posterior distributions of all model parameters. These wrappers are provided for convenience.\nThe ppo_plot() function shows the overlap between the priors specified versus a kernel density estimation of the posterior sample.\n\n\nVectraits API\nbayesTPC also includes a basic API to access the Vectraits database of disease vector trait data. One can either retrieve a pre-known dataset using get_dataset() or get_datasets(), or search specific keywords using find_datasets()."
  }
]